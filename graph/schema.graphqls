# GraphQL schema example
#
# https://gqlgen.com/getting-started/

# User

type User {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  email: String!
  password: String!
  firstName: String!
  lastName: String!
  isAdmin: Boolean!
  organizationID: ID!
}

input NewUser {
  email: String!
  password: String!
  organizationID: ID!
}

input UserID {
  id: ID!
}

# Organization

type Organization {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  users: [User!]!
}

input NewOrganization {
  name: String!
}

# Account

type Account {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  salesforceID: String
  salesforceOwnerID: String
  industry: String
  description: String
  numberOfEmployees: String
  annualRevenue: String
  billingCity: String
  billingState: String
  phone: String
  website: String
  type: String
  state: String
  notes: String
  assignmentEntries: [AccountAssignmentEntry!]!
  assignedTo: String
}

input NewAccount {
  id: ID
  salesforceID: String
  salesforceOwnerID: String
  name: String!
  industry: String
  description: String
  numberOfEmployees: String
  annualRevenue: String
  billingCity: String
  billingState: String
  phone: String
  website: String
  type: String
  state: String
  notes: String
  assignedTo: String
}

input AccountID {
  id: ID!
}

type AccountAssignmentEntry {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  accountId: ID!
  assignedBy: String!
  assignedTo: String
}

input NewAccountAssignmentEntry {
  accountId: ID!
  assignedBy: String!
  assignedTo: String
}

input AccountTrackingChange {
  account: NewAccount!
  newState: String!
}

# Note

type Note {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  ownerID: ID!
  accountID: ID!
  content: String!
}

input NewNote {
  id: ID!
  accountID: ID!
  content: String!
}

# Contact

type Contact {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  salesforceID: String
  firstName: String!
  lastName: String!
  jobTitle: String
  state: String
  email: String
  phone: String
  accountID: String
  assignedTo: String
  assignmentEntries: [ContactAssignmentEntry!]!
  # account: Account!
  # seniority: String
  # persona: String
}

input NewContact {
  id: ID
  salesforceID: String
  firstName: String!
  lastName: String!
  jobTitle: String
  state: String
  email: String
  phone: String
  accountID: String
  assignedTo: String
}

type ContactAssignmentEntry {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  contactId: ID!
  assignedBy: String!
  assignedTo: String
}

input NewContactAssignmentEntry {
  contactId: ID!
  assignedBy: String!
  assignedTo: String
}

# Task

type Task {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  associatedTo: ID
  description: String!
  done: Boolean!
  type: String
  dueDate: Time
  assignedTo: String
}

input SaveTask {
  id: ID!
  createdAt: Time!
  associatedTo: ID
  description: String
  done: Boolean
  type: String
  dueDate: Time
  assignedTo: String
}

type TaskAssignmentEntry {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  taskId: ID!
  assignedBy: String!
  assignedTo: String
}

input NewTaskAssignmentEntry {
  taskId: ID!
  assignedBy: String!
  assignedTo: String
}

# Workspace

type Workspace {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
  name: String!
  accounts: [Account!]!
  collaborators: [User!]!
}

input NewWorkspace {
  name: String!
}

# Misc

type StringArray {
  array: [String!]!
}

type Query {
  workspaces: [Workspace!]!
  organization: Organization
  accounts: [Account!]!
  accountAssignmentEntries(accountID: String!): [AccountAssignmentEntry!]!
  contacts(accountID: ID!): [Contact!]!
  contactAssignmentEntries(contactID: String!): [ContactAssignmentEntry!]!
  note(accountID: ID!) : Note!
  tasks(associatedTo: ID!) : [Task!]!
  taskAssignmentEntries(taskID: String!): [TaskAssignmentEntry!]!
}

type Mutation {
  createUser(input: NewUser!): User!
  createOrganization(input: NewOrganization!): Organization!
  createAccount(input: NewAccount!): Account!
  createContact(input: NewContact!): Contact!
  createWorkspace(input: NewWorkspace!): Workspace!
  createContactAssignmentEntry(input: NewContactAssignmentEntry!): ContactAssignmentEntry!
  createAccountAssignmentEntry(input: NewAccountAssignmentEntry!): AccountAssignmentEntry!
  createTaskAssignmentEntry(input: NewTaskAssignmentEntry!): TaskAssignmentEntry!

  saveAccounts(input: [NewAccount!]!): [Account!]!
  saveContacts(input: [NewContact!]!): [Contact!]!
  saveNote(input: NewNote!): Note!
  saveTask(input: SaveTask!): Task!

  applyAccountTrackingChanges(input: [AccountTrackingChange!]!): [Account!]!
}

type DBModel {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  deletedAt: Time
}

scalar Time